{"title": "10_inout.html", "sections": [{"title": "Cómo leer y escribir en Python", "blocks": [{"content": "<p> Cada programa es finalmente un procesador de datos, por lo que deberíamos saber cómo ingresar y generar datos dentro de él. Existe una función, <code>print()</code> , para generar datos desde cualquier programa de Python. Para usarlo, pase una lista de argumentos separados por comas que quiera imprimir a la función <code>print()</code> . Veamos un ejemplo. Presione &quot;ejecutar&quot; y luego &quot;siguiente&quot; para ver cómo se ejecuta el programa línea por línea:", "type": "html"}, {"content": "print(5 + 10)\nprint(3 * 7, (17 - 2) * 8)\nprint(2 ** 16)  # dos estrellas se usan para la exponenciación (2 a la potencia de 16)\nprint(37 / 3)  # solo barra inclinada es una división\nprint(37 // 3)  # doble barra inclinada es una división entera\n        # devuelve solo el cociente de la división (es decir, sin residuo)\nprint(37 % 3)  # signo de porcentaje es un operador de módulo\n        # da el resto del valor a la izquierda dividido por el valor correcto\n", "input": null, "language": "python3", "type": "code"}, {"content": "</p><p> Para ingresar datos en un programa, usamos <code>input()</code> . Esta función lee una sola línea de texto, como una cadena. </p><p> Aquí hay un programa que lee el nombre del usuario y lo saluda:", "type": "html"}, {"content": "print('What is your name?')\nname = input()  # lea una sola línea y guárdela en la variable &quot;nombre&quot;\nprint('Hi ' + name + '!')\n    ", "input": "John\n    ", "language": "python3", "type": "code"}, {"content": "</p>", "type": "html"}]}, {"title": "Suma de números y cadenas", "blocks": [{"content": "<p> Tratemos de escribir un programa que ingrese dos números e imprima su suma. Leemos los dos números y los almacenamos en las variables <code>a</code> y <code>b</code> usando el operador de asignación <code>=</code> . En el lado izquierdo de un operador de asignación ponemos el nombre de la variable. El nombre podría ser una cadena de caracteres latinos ( <code>AZ</code> , <code>az</code> , <code>0-9</code> , <code>_</code> ) pero <strong>debe</strong> comenzar con una letra en el rango <code>AZ</code> o <code>az</code> . En el lado derecho de un operador de asignación ponemos cualquier expresión que Python pueda evaluar. El nombre comienza a señalar el resultado de la evaluación. Lea este ejemplo, ejecútelo y observe el resultado:", "type": "html"}, {"content": "a = input()\nb = input()\ns = a + b\nprint(s)\n    ", "input": "5\n7\n    ", "language": "python3", "type": "code"}, {"content": "</p><p> Después de ejecutar el ejemplo, podemos ver que imprime <code>57</code> . Como nos enseñaron en la escuela, <code>5 + 7</code> da <code>12</code> . Entonces, el programa está equivocado, y es importante entender por qué. El asunto es que, en la tercera línea <code>s = a + b</code> Python ha &quot;sumado&quot; dos cadenas, en lugar de dos números. La suma de dos cadenas en Python funciona de la siguiente manera: simplemente están pegadas una tras otra. También a veces se llama &quot;concatenación de cadenas&quot;. </p><p> ¿Ves en el inspector de variables, en el lado derecho, que los valores ligados a las variables <code>a</code> y <code>b</code> están entre comillas? Eso significa que los valores que hay son cadenas, no números. Las cadenas y los números están representados en Python de manera diferente. </p><p> Todos los valores en Python se llaman &quot;objetos&quot;. Cada objeto tiene un cierto tipo. El número 2 corresponde a un objeto &quot;número 2&quot; de tipo &quot;int&quot; (es decir, un número entero). La cadena <code>&#39;hello&#39;</code> corresponde a un objeto &quot;cadena &#39;hola&#39;&quot; de tipo &quot;cadena&quot;. Cada número de coma flotante se representa como un objeto de tipo &quot;flotante&quot;. El tipo de objeto especifica qué tipo de operaciones se le pueden aplicar. Por ejemplo, si las dos variables <code>&quot;first&quot;</code> y <code>&quot;second&quot;</code> apuntan a los objetos de tipo <code>int</code> , Python puede multiplicarlos. Sin embargo, si están apuntando a los objetos de tipo <code>str</code> , Python no puede hacer eso:", "type": "html"}, {"content": "first = 5\nsecond = 7\nprint(first * second)\n\n# puedes usar comillas simples o dobles para definir una cadena\nfirst = '5'\nsecond = \"7\"\nprint(first * second)\n    ", "input": null, "language": "python3", "type": "code"}, {"content": "</p><p> Para convertir (convertir) la cadena de dígitos en un número entero, podemos usar la función <code>int()</code> . Por ejemplo, <code>int(&#39;23&#39;)</code> da un objeto int con valor <code>23</code> . </p><p> Dada la información anterior, ahora podemos corregir el resultado incorrecto y generar la suma de los dos números correctamente:", "type": "html"}, {"content": "a = int(input())\nb = int(input())\ns = a + b\nprint(s)\n    ", "input": "5\n7\n    ", "language": "python3", "type": "code"}, {"content": "</p>", "type": "html"}]}]}