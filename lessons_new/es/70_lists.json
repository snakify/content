{
    "title": "70_lists.html",
    "sections": [
        {
            "title": "Lists",
            "blocks": [
                {
                    "content": "<p>Most of programs work not only with variables. They also use lists of variables.\nFor example, a program can handle an information about students in a class by reading the list of\nstudents from the keyboard or from a file. A change in the number of students in the class\nmust not require modification of the program source code.\n\n<p>Previously we have already faced the task of processing elements of a sequence &mdash;\nfor example, when computing the largest element of the sequence. But \nwe haven't kept the whole sequence in computer's memory. However, \nin many problems it is necessary to keep the entire sequence, like\nif we had to print out all the elements of a sequence\nin ascending order (&quot;sort a sequence&quot;).\n\n\n<p>To store such data, in Python you can use the data structure\ncalled <u>list</u> (in most programming languages the different term is used &mdash; &ldquo;array&rdquo;).\nA list is a sequence of elements numbered\nfrom 0, just as characters in the string. The list can be set manually by enumerating of the elements\nthe list in square brackets, like here:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "Primes = [2, 3, 5, 7, 11, 13]\nRainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']\n",
                    "type": "code"
                },
                {
                    "content": "<p>The list <code>Primes</code> has 6 elements, namely:\n<code>Primes[0]&nbsp;==&nbsp;2</code>, \n<code>Primes[1]&nbsp;==&nbsp;3</code>, \n<code>Primes[2]&nbsp;==&nbsp;5</code>, \n<code>Primes[3]&nbsp;==&nbsp;7</code>, \n<code>Primes[4]&nbsp;==&nbsp;11</code>, \n<code>Primes[5]&nbsp;==&nbsp;13</code>.\nThe list <code>Rainbow</code> has 7 elements, each of which\nis the string.\n\n<p>\nLike the characters in the string, the list elements can also have negative index, for example, \n<code>Primes[-1]&nbsp;==&nbsp;13</code>, \n<code>Primes[-6]&nbsp;==&nbsp;2</code>.  The negative index means we start at the last element and go left when reading a list.\n\n<p>You can obtain the number of elements in a list with the function <code>len</code> (meaning <i>length of the list</i>), e.g. \n<code>len(Primes)&nbsp;==&nbsp;6</code>.\n\n<p>Unlike strings, the elements of a list are changeable; they can be changed by assigning them new values.",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "Rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']\nprint(Rainbow[0])\nRainbow[0] = 'red'\nprint('Print the rainbow')\nfor i in range(len(Rainbow)):\n    print(Rainbow[i])\n",
                    "type": "code"
                },
                {
                    "content": "<p>Consider several ways of creating and reading lists. First of all, you can create\nan empty list (the list with no items, its length is 0), and you can add items to the end of your list\nusing <code>append</code>. For example, suppose the program receives\nthe number of elements in the list <code>n</code>, and then <code>n</code> elements of\nthe list one by one each at the separate line. Here is an example of input data in this format:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "5\n1809\n1854\n1860\n1891\n1925\n",
                    "type": "code"
                },
                {
                    "content": "In this case, you can organize the reading from such list as follows:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": "5\n1809\n1854\n1860\n1891\n1925\n",
                    "content": "a = [] # start an empty list\nn = int(input()) # read number of element in the list\nfor i in range(n): \n    new_element = int(input()) # read next element\n    a.append(new_element) # add it to the list\n    # the last two lines could be replaced by one:\n    # a.append(int(input()))\nprint(a)\n",
                    "type": "code"
                },
                {
                    "content": "<p>In the demonstrated example the empty list is created, then the number of elements is read, then you read the list items line by line and append to the end.\nThe same thing can be done, saving the variable <code>n</code>:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": "5\n1809\n1854\n1860\n1891\n1925\n",
                    "content": "a = []\nfor i in range(int(input())):\n    a.append(int(input()))\nprint(a)\n",
                    "type": "code"
                },
                {
                    "content": "<p>There are several operations defined for lists: list concatenation\n(addition of lists, i.e. &quot;gluing&quot; one list to another) and repetition (multiplying a list\nby a number). For example:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = [1, 2, 3]\nb = [4, 5]\nc = a + b\nd = b * 3\nprint([7, 8] + [9])\nprint([0, 1] * 3)\n",
                    "type": "code"
                },
                {
                    "content": "<p>The resulting list <code>c</code> will be equal to <code>[1, 2, 3, 4, 5]</code>, and a list of\n<code>d</code> will be equal to <code>[4, 5, 4, 5, 4, 5]</code>. This allows you \nto organize the process of reading lists differently: first, consider the size of the list and create a list\nfrom the desired number of elements, then loop through the variable <code>i</code> starting\nwith number 0 and inside the loop read <code>i</code>-th element of the list:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": "5\n1809\n1854\n1860\n1891\n1925\n",
                    "content": "a = [0] * int(input())\nfor i in range(len(a)):\n    a[i] = int(input())\n",
                    "type": "code"
                },
                {
                    "content": "<p>You can print elements of a list <code>a</code> with <code>print(a)</code>;\nthis displays the list items surrounded by square brackets and separated by commas. In general, this is inconvenient; in common, you are about to print all the elements in one line or one item per line. Here are two examples of that, using other forms of loop:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = [1, 2, 3, 4, 5]\nfor i in range(len(a)):\n    print(a[i])\n",
                    "type": "code"
                },
                {
                    "content": "<p> Here the index <code>i</code> is changed, then the element <code>a[i]</code> is displayed.",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = [1, 2, 3, 4, 5]\nfor elem in a:\n    print(elem, end=' ')\n",
                    "type": "code"
                },
                {
                    "content": "<p>In this example, the list items are displayed in one line separated by spaces, and it's not the index that is changed but rather the value of the variable itself (for example, in the loop <code>for elem in ['red', 'green', 'blue']</code> variable\n<code>elem</code> will take the values <code>'red'</code>,\n<code>'green'</code>, <code>'blue'</code> successively.\n\n<p>Pay special attention to the last example! A very important part of Python ideology is <code>for</code> loop, which provides the convenient way to iterate over all elements of some sequence.\nThis is where Python differs from Pascal, where you have to iterate over elements' <i>indexes</i>,\nbut not over the elements themselves. \n\n<p>Sequences in Python are strings, lists, values of the function <code>range()</code> (these are not lists), and \nsome other objects.\n\n<p>Here's an example showing the use of the <code>for</code> loop when you are needed to extract all the digits from a string and to make numeric list of them.",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "# given: s = 'ab12c59p7dq'\n# you need to extract digits from the list s\n# to make it so:\n# digits == [1, 2, 5, 9, 7]\ns = 'ab12c59p7dq'\ndigits = []\nfor symbol in s:\n    if '1234567890'.find(symbol) != -1:\n        digits.append(int(symbol))\nprint(digits)\n",
                    "type": "code"
                }
            ]
        },
        {
            "title": "Split and join methods",
            "blocks": [
                {
                    "content": "<p>List items can be given in one line separated by a character; in this case, the entire list can be read using <code>input()</code>. You can then use a string method\n<code>split()</code>, which returns a list of strings resulting after cutting the initial string by spaces. Example:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": "1 2 3\n",
                    "content": "# the input is a string\n# 1 2 3\ns = input() # s == '1 2 3'\na = s.split() # a == ['1', '2', '3']\nprint(a)\n",
                    "type": "code"
                },
                {
                    "content": "<p>If you run this program with the input data of <code>1 2 3</code>, the list\n<code>a</code> will be equal to <code>['1', '2', '3']</code>. Please note that\nthe list will consist of strings, not of numbers. If you want to get the list\nof numbers, you have to convert the list items one by one to integers:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": "1 2 3\n",
                    "content": "a = input().split()\nfor i in range(len(a)):\n    a[i] = int(a[i])\nprint(a)\n",
                    "type": "code"
                },
                {
                    "content": "<p>Using the special magic of Python &mdash; generators &mdash;\nthe same can be done in one line:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": "1 2 3\n",
                    "content": "a = [int(s) for s in input().split()]\nprint(a)\n",
                    "type": "code"
                },
                {
                    "content": "<p>(We will explain of how does this code work in the next section.)\nIf you want to read a list of real numbers, you have to change the type\n<code>int</code> to <code>float</code>.\n\n<p>The method <code>split()</code> has an optional parameter that\ndetermines which string will be used as the separator\nbetween list items. For example, calling the method <code>split('.')</code>\nreturns the list obtained by splitting the initial string where the character\n<code>'.'</code> is encountered:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = '192.168.0.1'.split('.')\nprint(a)\n",
                    "type": "code"
                },
                {
                    "content": "<p>In Python, you can display a list of strings using one-line commands. \nFor that, the method <code>join</code> is used; this method has one parameter: a list of strings. \nIt returns the string obtained by concatenation of the elements given, and the separator is inserted between the elements of the list; this separator is equal to the string on which is the method applied. We know that you didn't\nunderstand the previous sentence from the first time. :) Look at the examples:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = ['red', 'green', 'blue']\nprint(' '.join(a))\n# return red green blue\nprint(''.join(a))\n# return redgreenblue\nprint('***'.join(a))\n# returns red***green***blue\n",
                    "type": "code"
                },
                {
                    "content": "<p>If a list consists of numbers, you have to use the dark magic of generators.\nHere's how you can print out the elements of a list, separated by spaces:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = [1, 2, 3]\nprint(' '.join([str(i) for i in a]))\n# the next line causes a type error,\n# as join() can only concatenate strs\n# print(' '.join(a))\n",
                    "type": "code"
                },
                {
                    "content": "<p>However, if you are not a fan of dark magic, you can achieve the same effect using the loop <code>for</code>.",
                    "type": "html"
                }
            ]
        },
        {
            "title": "Generators",
            "blocks": [
                {
                    "content": "<p>To create a list filled with identical items, you can use\nthe repetition of list, for example:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "n = 5\na = [0] * n\nprint(a)\n",
                    "type": "code"
                },
                {
                    "content": "<p>To create more complicated lists you can use\n<em>generators</em>: the expressions allowing to fill a list according to a formula.\nThe general form of a generator is as follows:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "[expression for variable in sequence]\n",
                    "type": "code"
                },
                {
                    "content": "<p>where <code><em>variable</em></code> is the ID of some\nvariable, <code><em>sequence</em></code> is a sequence of values,\nwhich takes the variable (this can be a list, a string, or an object obtained using the function <code>range</code>),\n<code><em>expression</em></code>&nbsp;&mdash; some expression, usually depending on the variable used in the generator. The list elements will be filled according to this expression.\n\n<p>Here are some examples of people using generators.\n\n<p>This is how you create a list of <code>n</code> zeros using the generator:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = [0 for i in range(5)]\nprint(a)\n",
                    "type": "code"
                },
                {
                    "content": "<p>Here's how you create a list filled with squares of integers:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "n = 5\na = [i ** 2 for i in range(n)]\nprint(a)\n",
                    "type": "code"
                },
                {
                    "content": "<p>If you need to fill out a list of squares of numbers from 1 to <code>n</code>,\nyou can change the settings of <code>range</code> to\n<code>range(1, n + 1)</code>:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "n = 5\na = [i ** 2 for i in range(1, n + 1)]\nprint(a)\n",
                    "type": "code"
                },
                {
                    "content": "<p>Here's how you can get a list filled with random\nnumbers from 1 to 9 (using <code>randrange</code>\nfrom the module <code>random</code>):",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "from random import randrange\nn = 10\na = [randrange(1, 10) for i in range(n)]\nprint(a)\n",
                    "type": "code"
                },
                {
                    "content": "<p>And in this example the list will consist of lines read\nfrom standard input: first, you need to enter the number of elements of\nthe list (this value will be used as an argument of\nthe function <code>range</code>), second&nbsp;&mdash; that number of strings:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": "5\na\nb\n1\n2\n3\n",
                    "content": "a = [input() for i in range(int(input()))]\nprint(a)\n",
                    "type": "code"
                }
            ]
        },
        {
            "title": "Slices",
            "blocks": [
                {
                    "content": "<p>With lists and strings, you can do slices. Namely:\n\n\n<p><code>A[i:j]</code>&nbsp; slice <code>j-i</code> elements\n<code>A[i]</code>, <code>A[i+1]</code>, ..., <code>A[j-1]</code>.\n\n<p><code>A[i:j:-1]</code>&nbsp; slice <code>i-j</code> elements\n\n<code>A[i]</code>, <code>A[i-1]</code>, ..., <code>A[j+1]</code>\n(that is, changing the order of the elements).\n\n<p><code>A[i:j:k]</code>&nbsp; cut with the step <code>k</code>:\n<code>A[i]</code>, <code>A[i+k]</code>, <code>A[i+2*k]</code>,... .\nIf the value of <code>k</code>&lt;0, the elements come in the opposite order.\n\n\n\n<p>Each of the numbers <code>i</code> or <code>j</code> may be missing,\nwhat means &ldquo;the beginning of line&rdquo; or &ldquo;the end of line&quot;\n\n<p>Lists, unlike strings, are <b>mutable objects</b>: you can assign a list item to a new value. Moreover, it is possible to change entire\nslices. For example:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "A = [1, 2, 3, 4, 5]\nA[2:4] = [7, 8, 9]\nprint(A)\n",
                    "type": "code"
                },
                {
                    "content": "<p>Here we received a list <code>[1, 2, 3, 4, 5]</code>, and then try to replace the two elements of the slice <code>A[2:4]</code>\nwith a new list of three elements. The resulting list is as follows:\n<code>[1, 2, 7, 8, 9, 5]</code>.",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "A = [1, 2, 3, 4, 5, 6, 7]\nA[::-2] = [10, 20, 30, 40]\nprint(A)\n",
                    "type": "code"
                },
                {
                    "content": "<p>And here, the resulting list will be <code>[40, 2, 30, 4, 20, 6, 10]</code>. The reason is,\n<code>A[::-2]</code> is a list of elements\n\n<code>A[-1]</code>, <code>A[-3]</code>, <code>A[-5]</code>, <code>A[-7]</code>, and that elements are\nassigned to 10, 20, 30, 40, respectively. \n\n<p>If a discontinuous slice (i.e. a slice with a step <code>k</code>, <code>\nk > 1</code>) is assigned a new value, then the number of elements in the old and new slices\nnecessarily coincide, otherwise error <code>ValueError</code> occurs.\n\n<p>Note that <code>A[i]</code> is a list item, not a slice!",
                    "type": "html"
                }
            ]
        },
        {
            "title": "Operations on lists",
            "blocks": [
                {
                    "content": "<p>You can easily do many different operations with lists.\n\n\n<table border=\"1\" cellpadding=\"5\">\n\n<tr>\n<td>\n<div style=\"margin:5px; font-weight: bold;\">\nx in A\n</div>\n</td>\n<td>\n<div style=\"margin:5px;\"> \nCheck whether an item in the list. Returns True or False\n</div>\n</td>\n</tr>\n\n\n<tr>\n<td>\n<div style=\"margin:5px; font-weight: bold;\">\nx not in A\n</div>\n</td>\n<td>\n<div style=\"margin:5px;\"> \nThe same as not(x in A)\n</div>\n</td>\n</tr>\n\n\n<tr>\n<td>\n<div style=\"margin:5px; font-weight: bold;\">\nmin(A)\n</div>\n</td>\n<td>\n<div style=\"margin:5px;\"> \nThe smallest element of list\n</div>\n</td>\n</tr>\n\n\n<tr>\n<td>\n<div style=\"margin:5px; font-weight: bold;\">\nmax(A)\n</div>\n</td>\n<td>\n<div style=\"margin:5px;\"> \nThe largest element in the list\n</div>\n</td>\n</tr>\n\n<tr>\n<td>\n<div style=\"margin:5px; font-weight: bold;\">\nA.index(x)\n</div>\n</td>\n<td>\n<div style=\"margin:5px;\"> \nThe index of the first occurrence of element x in the list; in its absence generates an exception ValueError\n</div>\n</td>\n</tr>\n\n\n<tr>\n<td>\n<div style=\"margin:5px; font-weight: bold;\">\nA.count(x)\n</div>\n</td>\n<td>\n<div style=\"margin:5px;\"> \nThe number of occurrences of element x in the list\n</div>\n</td>\n</tr>\n\n</table>",
                    "type": "html"
                }
            ]
        }
    ]
}