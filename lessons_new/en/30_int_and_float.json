{
    "title": "30_int_and_float.html",
    "sections": [
        {
            "title": "Integer arithmetics",
            "blocks": [
                {
                    "content": "<p>We already know the following operators which may be applied to numbers:\n<code>+</code>, <code>-</code>, <code>*</code> and <code>**</code>. The division operator\n<code>/</code> for integers gives a floating-point real number (an object of type <code>float</code>).\nThe exponentiation <code>**</code> also returns a float when the power is negative:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "print(17 / 3)  # gives 5.66666666667\nprint(2 ** 4)  # gives 16\nprint(2 ** -2) # gives 0.25\n",
                    "type": "code"
                },
                {
                    "content": "<p>There's a special operation for integer division where the remainder is discarded: <code>//</code>.\nThe operation that yields a remainder of such a division looks like <code>%</code>.\nBoth operation always yield an object of type <code>int</code>.",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "print(17 / 3)   # gives 5.66666666667\nprint(17 // 3)  # gives 5\nprint(17 % 3)   # gives 2\n",
                    "type": "code"
                },
                {
                    "content": "",
                    "type": "html"
                }
            ]
        },
        {
            "title": "Floating-point numbers",
            "blocks": [
                {
                    "content": "<p>When we read an integer value, we read a line with <code>input()</code>\nand then cast a string to integer using <code>int()</code>.\nWhen we read a floating-point number, we need to cast the string to\nfloat using <code>float()</code>:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": "1.492\n",
                    "content": "x = float(input())\nprint(x)\n\n",
                    "type": "code"
                },
                {
                    "content": "<p>Floats with very big or very small absolute value can be written using a scientific notation.\nEg., the distance from the Earth to the Sun is 1.496&middot;10<sup>11</sup>, or <code>1.496e11</code>\nin Python. The mass of one molecule of the water is 2.99&middot;10<sup>-23</sup>,\nor <code>2.99e-23</code> in Python.\n\n<p>One can cast float objects to int objects by discarding the fraction part using the <code>int()</code>\nfunction. This function demonstrates so called <i>rounding towards zero</i> behavior:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "print(int(1.3))   # gives 1\nprint(int(1.7))   # gives 1\nprint(int(-1.3))  # gives -1\nprint(int(-1.7))  # gives -1\n",
                    "type": "code"
                },
                {
                    "content": "<p>There's also a function <code>round()</code> that performs the usual rounding:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "print(round(1.3))   # gives 1\nprint(round(1.7))   # gives 2\nprint(round(-1.3))  # gives -1\nprint(round(-1.7))  # gives -2\n",
                    "type": "code"
                },
                {
                    "content": "<p>Floating-point real numbers can't be represented with exact precision due to hardware limitations.\nThis can lead to cumbersome effects. <a href=\"https://docs.python.org/3.6/tutorial/floatingpoint.html\">See the Python docs</a> for the details.",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "print(0.1 + 0.2)  # gives 0.30000000000000004\n",
                    "type": "code"
                }
            ]
        },
        {
            "title": "math module",
            "blocks": [
                {
                    "content": "<p>Python has many auxiliary functions for calculations with floats. They can be\nfound in the <code>math</code> module.\n\n<p>To use this module, we need to import it first by writing the following instruction\nat the beginning of the program:\n<pre>import math\n</pre> \n \n<p>For example, if we want to find a ceiling value for <code>x</code> - the smallest integer not less than \n<code>x</code> - we call the appropriate function from the math module: <code>math.ceil(x)</code>.\nThe syntax for calling functions from modules is always the same:\n<code>module_name.function_name(argument_1, argument_2, ...)</code>",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "import math\n\nx = math.ceil(4.2)\nprint(x)\nprint(math.ceil(1 + 3.8))\n",
                    "type": "code"
                },
                {
                    "content": "</pre> \n \n<p>There's another way to use functions from modules: to import the certain functions by naming them:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "from math import ceil\n \nx = 7 / 2\ny = ceil(x)\nprint(y)\n",
                    "type": "code"
                },
                {
                    "content": "<p>Some of the functions dealing with numbers - <code>int()</code>,\n<code>round()</code> and <code>abs()</code> (absolute value aka modulus) -\nare built-in and don't require any imports.\n \n<p>All the functions of any standard Python module are documented on the official Python website.\n<a href=\"http://docs.python.org/3.6/library/math.html\">Here's the description for math module</a>.\nThe description of some functions is given:\n \n<table border=\"1\"> \n<tr> \n<th>Function</th> \n<th>Description</th> \n</tr> \n<tr> \n<td colspan=2>Rounding</td> \n</tr> \n<tr> \n<td><b><code>floor(x)</code></b></td> \n<td>Return the floor of x, the largest integer less than or equal to x.</td> \n</tr> \n<tr> \n<td><b><code>ceil(x)</code></b></td> \n<td>Return the ceiling of x, the smallest integer greater than or equal to x.</td> \n</tr> \n<tr> \n<td colspan=2>Roots and logarithms</td> \n</tr> \n<tr> \n<td><b><code>sqrt(x)</code></b></td> \n<td>Return the square root of x</td> \n</tr> \n<tr> \n<td><b><code>log(x)</code></b></td> \n<td>With one argument, return the natural logarithm of x (to base e).\nWith two arguments, return the logarithm of x to the given base\n</td> \n</tr> \n<tr> \n<td><b><code>e</code></b></td> \n<td>The mathematical constant e = 2,71828...</td> \n</tr> \n<tr> \n<td colspan=2>Trigonometry</td> \n</tr> \n<td><b><code>sin(x)</code></b></td> \n<td>Return the sine of x radians</td> \n</tr> \n<tr> \n<td><b><code>asin(x)</code></b></td> \n<td>Return the arcsine of x, in radians</td> \n</tr> \n<tr> \n<td><b><code>pi</code></b></td> \n<td>The mathematical constant <i>&pi;</i> = 3.1415...</td> \n</tr> \n</table>",
                    "type": "html"
                }
            ]
        }
    ]
}