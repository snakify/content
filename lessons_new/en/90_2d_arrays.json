{
    "title": "90_2d_arrays.html",
    "sections": [
        {
            "title": "Nested lists: processing and printing",
            "blocks": [
                {
                    "content": "In real-world Often tasks have to store rectangular data table. [say more on this!]\nSuch tables are called <em>matrices</em> or two-dimensional arrays. In Python any table can be represented as a list of lists (a list, where each element is in turn a list).\nFor example, here's the program that creates a numerical table with two rows and three columns, and then makes some manipulations with it:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = [[1, 2, 3], [4, 5, 6]]\nprint(a[0])\nprint(a[1])\nb = a[0]\nprint(b)\nprint(a[0][2])\na[0][1] = 7\nprint(a)\nprint(b)\nb[2] = 9\nprint(a[0])\nprint(b)\n",
                    "type": "code"
                },
                {
                    "content": "<p>The first element of <code>a</code> here &mdash; <code>a[0]</code> &mdash; is a list of numbers\n<code>[1, 2, 3]</code>. The first element of <em>this</em> new list is <code>a[0][0] == 1</code>; moreover,\n<code>a[0][1] == 2</code>, <code>a[0][2] == 3</code>,\n<code>a[1][0] == 4</code>, <code>a[1][1] == 5</code>,\n<code>a[1][2] == 6</code>.\n\n<p>To process 2-dimensional array, you typically use nested\nloops. The first loop iterates through the row number, the second loop runs through the elements inside of a row.\nFor example, that's how you display two-dimensional numerical list on the screen line by line,\nseparating the numbers with spaces:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = [[1, 2, 3, 4], [5, 6], [7, 8, 9]]\nfor i in range(len(a)):\n    for j in range(len(a[i])):\n        print(a[i][j], end=' ')\n    print()\n",
                    "type": "code"
                },
                {
                    "content": "<p>We have already tried to explain that a for-loop variable in Python can iterate not only over a <code>range()</code>, but generally over all the elements of any sequence. Sequences in Python are lists and strings (and some other objects that we haven't met yet). Look how you can print a two-dimensional array, using this handy feature of loop <code>for</code>:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = [[1, 2, 3, 4], [5, 6], [7, 8, 9]]\nfor row in a:\n    for elem in row:\n        print(elem, end=' ')\n    print()\n",
                    "type": "code"
                },
                {
                    "content": "<p>Naturally, to output a single line you can use\nmethod <code>join()</code>:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "for row in a:\n    print(' '.join([str(elem) for elem in row]))\n",
                    "type": "code"
                },
                {
                    "content": "<p>This is how you can use 2 nested loops to calculate the sum of all\nthe numbers in the 2-dimensional list:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = [[1, 2, 3, 4], [5, 6], [7, 8, 9]]\ns = 0\nfor i in range(len(a)):\n    for j in range(len(a[i])):\n        s += a[i][j]\nprint(s)\n",
                    "type": "code"
                },
                {
                    "content": "<p>Or the same with iterating by elements, not by the variables <code>i</code> and <code>j</code>:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = [[1, 2, 3, 4], [5, 6], [7, 8, 9]]\ns = 0\nfor row in a:\n    for elem in row:\n        s += elem\nprint(s)\n",
                    "type": "code"
                }
            ]
        },
        {
            "title": "Nested lists: creating",
            "blocks": [
                {
                    "content": "<p>Suppose that two numbers are given: the number of rows of <code>n</code> and the number of columns\n<code>m</code>. You must create a list of size <code>n</code>&times;<code>m</code>, filled with, say, zeros.\n\n<p>The obvious solution appears to be wrong:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "a = [[0] * m] * n\n",
                    "type": "code"
                },
                {
                    "content": "<p>This can be easily seen if you set the value of <code>a[0][0]</code>\nto <code>5</code>, and then print the value of <code>a[1][0]</code>&nbsp;&mdash; it will also be equal to 5. The reason is,\n<code>[0] * m</code> returns just a <em>reference</em> to a list of <code>m</code> zeros, but not a list.\nThe subsequent repeating of this element creates a list of <code>n</code>\nitems that all reference to the same list (just\nas well as the operation <code>b&nbsp;=&nbsp;a</code> for lists does not create\nthe new list), so all rows in the resulting list are actually\nthe same string.\n<p>Using our visualizer, keep track of the id of lists. If two lists have the same id number, it's actually the same list in memory.",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "n = 3\nm = 4\na = [[0] * m] * n\na[0][0] = 5\nprint(a[1][0])\n",
                    "type": "code"
                },
                {
                    "content": "<p>Thus, a two-dimensional list cannot be created simply by\nrepeating a string. What to do?..\n\n<p>A possible way: you can create a list of <code>n</code> elements\n(say, of <code>n</code> zeros) and then make each of the elements a link to another one-dimensional list of <code>m</code>\nelements:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "n = 3\nm = 4\na = [0] * n\nfor i in range(n):\n    a[i] = [0] * m\n",
                    "type": "code"
                },
                {
                    "content": "<p>Another (but similar) way: create an empty list and then <code>append</code> a new element to it <code>n</code>\ntimes (this element should be a list of length <code>m</code>):",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "n = 3\nm = 4\na = []\nfor i in range(n):\n    a.append([0] * m)\n",
                    "type": "code"
                },
                {
                    "content": "<p>But the easiest way is to use generator, creating a list of\n<code>n</code> elements, each of which is a list of <code>m</code> zeros:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "n = 3\nm = 4\na = [[0] * m for i in range(n)]\n",
                    "type": "code"
                },
                {
                    "content": "<p>In this case each element is created independently from the others.\nThe list <code>[0] * m</code> is <code>n</code> times consructed as the new one, and no copying of references occurs.",
                    "type": "html"
                }
            ]
        },
        {
            "title": "How do you input a two-dimensional array?",
            "blocks": [
                {
                    "content": "<p>Say, a program takes on input two-dimensional array in the form of\n<code>n</code> rows, each of which contains <code>m</code>\nnumbers separated by spaces. How do you force the program to read it? An example of how you can do it:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": "3\n1 2 3 4\n5 6\n7 8 9\n",
                    "content": "# the first line of input is the number of rows of the array\nn = int(input()) \na = []\nfor i in range(n):\n    a.append([int(j) for j in input().split()])\n",
                    "type": "code"
                },
                {
                    "content": "<P>Or, without using sophisticated nested calls:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": "3\n1 2 3 4\n5 6\n7 8 9\n",
                    "content": "# the first line of input is the number of rows of the array\nn = int(input()) \na = []\nfor i in range(n):\n    row = input().split()\n    for i in range(len(row)):\n        row[i] = int(row[i])\n    a.append(row)\n",
                    "type": "code"
                },
                {
                    "content": "<p>You can do the same with generators:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": "3\n1 2 3 4\n5 6\n7 8 9\n",
                    "content": "# the first line of input is the number of rows of the array\nn = int(input()) \na = [[int(j) for j in input().split()] for i in range(n)]\n",
                    "type": "code"
                }
            ]
        },
        {
            "title": "Processing a two-dimensional array: an example",
            "blocks": [
                {
                    "content": "<p>Suppose you are given a square array (an array of <code>n</code> rows and <code>n</code> columns). And suppose you have to set elements of the main diagonal equal to 1 (that is, those elements <code>a[i][j]</code> for which <code>i==j</code>), to set elements above than that diagonal equal to 0, and to set elements below that diagonal equal to 2.\nThat is, you need to produce such an array\n(example for <code>n==4</code>):",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "n = 4\na = [[0] * n for i in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            a[i][j] = 0\n        elif i > j:\n            a[i][j] = 2\n        else:\n            a[i][j] = 1\nfor row in a:\n    print(' '.join([str(elem) for elem in row]))\n",
                    "type": "code"
                },
                {
                    "content": "(In this case you can do it manually by setting <code>a[0][0] = 1</code>, <code>a[0][1] = 0</code> and so on, but you won't do it manually for arrays of 100 rows and 100 columns, which are often the case.)\n\n<p>We are eager to show you several ways of solving this problem. First, note that elements that lie above the main diagonal&nbsp;&ndash; are elements\n<code>a[i][j]</code> for which <code>i&lt;j</code>, and that for elements below the main diagonal <code>i&gt;j</code>. Thus, we can\ncompare the values <code>i</code> and <code>j</code>, which determines the value of <code>a[i][j]</code>. We get the following algorithm:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "for i in range(n):\n    a[i][i] = 1\n",
                    "type": "code"
                },
                {
                    "content": "<p>This algorithm is slow: it uses two loops and for each pair <code>(i,j)</code> executes one or two <code>if</code> instructions. \nIf we complicate the algorithm, we will be able to do it without a conditional statement.\n\n<p>First, fill the main diagonal, for which we will need one loop:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "for i in range(n):\n    for j in range(i + 1, n):\n        a[i][j] = 0\n",
                    "type": "code"
                },
                {
                    "content": "<p>Then fill with zeros all the elements above the main diagonal. To make this, for each row\nwith the number <code>i</code> you need to assign a value to <code>a[i][j]</code> for <code>j</code>=<code>i+1</code>, ..., <code>n-1</code>. To do that, you need nested loops:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "for i in range(n):\n    for j in range(0, i):\n        a[i][j] = 2\n",
                    "type": "code"
                },
                {
                    "content": "<p>By analogy, for <code>j</code>=<code>0</code>, ..., <code>i-1</code> set the elements <code>a[i][j]</code> equal to <code>2</code>:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "n = 4\na = [[0] * n for i in range(n)]\nfor i in range(n):\n    for j in range(0, i):\n        a[i][j] = 2\n    a[i][i] = 1\n    for j in range(i + 1, n):\n        a[i][j] = 0\nfor row in a:\n    print(' '.join([str(elem) for elem in row]))\n",
                    "type": "code"
                },
                {
                    "content": "<p>You can combine all this code and receive another solution:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "n = 4\na = [0] * n\nfor i in range(n):\n    a[i] = [2] * i + [1] + [0] * (n - i - 1)\nfor row in a:\n    print(' '.join([str(elem) for elem in row]))    \n",
                    "type": "code"
                },
                {
                    "content": "<p>Here's another solution, which repeats lists to build the next rows of the list. The <code>i</code>-th line of the list consists of <code>i</code> numbers\n<code>2</code>, followed by one integer <code>1</code>, followed by <code>n-i-1</code> zeros:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "n = 4\na = [0] * n\na = [[2] * i + [1] + [0] * (n - i - 1) for i in range(n)]\nfor row in a:\n    print(' '.join([str(elem) for elem in row]))    \n",
                    "type": "code"
                },
                {
                    "content": "<p>As usual, you can replace the loop with the generator:",
                    "type": "html"
                }
            ]
        },
        {
            "title": "Two-dimensional arrays: nested generators",
            "blocks": [
                {
                    "content": "<p>You can use nested generators to create two-dimensional arrays, placing\nthe generator of the list which is a string, inside the generator of all the strings. Recall that you can create a list of <code>n</code> rows and <code>m</code> columns using the generator (which\ncreates a list of <code>n</code> elements, where each element is a list of\n<code>m</code> zeros):",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "[[0] * m for i in range(n)]\n",
                    "type": "code"
                },
                {
                    "content": "<p>But the internal list can also be created using, for example, such generator:\n<code>[0 for j in range(m)]</code>. Nesting one generator into another, we obtain",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "[[0 for j in range(m)] for i in range(n)]\n",
                    "type": "code"
                },
                {
                    "content": "<p>How is it related to our problem? The thing is, if the number 0 is replaced by some expression that depends on <code>i</code> (the line number) and <code>j</code> (the column number), you get the matrix filled\naccording to some formula.\n\n<p>For example, suppose you need to initialize the following array (for convenience, extra spaces are added between items):",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "0  0  0  0  0  0\n0  1  2  3  4  5\n0  2  4  6  8 10\n0  3  6  9 12 15\n0  4  8 12 16 20\n",
                    "type": "code"
                },
                {
                    "content": "<p>In this array there are <code>n = 5</code> rows, <code>m = 6</code> columns, and the element\nwith row index <code>i</code> and column index <code>j</code> is calculated by the formula\n\n<code>a[i][j] = i * j</code>.\n\n<p>As always, you could use generator to create such an array:",
                    "type": "html"
                },
                {
                    "language": "python3",
                    "input": null,
                    "content": "[[i * j for j in range(m)] for i in range(n)]\n",
                    "type": "code"
                }
            ]
        }
    ]
}